"""Tests for the network module."""

import StringIO
import unittest

# Third-party modules.
import arp
import mock
import netifaces

# Module under test.
import network

FAKE_ROUTE_TABLE_GOOD = """
Iface   Destination     Gateway         Flags   RefCnt  Use
eth0    01020304        00000000        0001    0       0       0
eth0    0000FEA9        00000000        0001    0       0       1002
eth0    00000000        02030405        0003    0       0       0
""".strip()
# This route table is "bad" because it is missing a default route, i.e. there
# is no Destination address of "00000000".
FAKE_ROUTE_TABLE_NO_DEFAULT_ROUTE = """
Iface   Destination     Gateway         Flags   RefCnt  Use
eth0    01020304        00000000        0001    0       0       0
eth0    0000FEA9        00000000        0001    0       0       1002
""".strip()

FAKE_ARP_CACHE = """
IP address       HW type     Flags       HW address            Mask     Device
5.4.3.2          0x1         0x2         00:11:22:33:44:55     *        eth0
""".strip()


@mock.patch.object(netifaces, 'interfaces')
@mock.patch.object(netifaces, 'ifaddresses')
class NetworkLocalTest(unittest.TestCase):
    """Tests for getting local MAC address with the network module."""

    def test_get_local_mac(self, mock_ifaddresses, mock_interfaces):
        expected_mac = '00:11:22:33:44:55'
        mock_interfaces.return_value = ['lo', 'eth0']
        mock_ifaddresses.return_value = {
            netifaces.AF_LINK: [{'addr': '00:11:22:33:44:55'}]
        }

        returned_mac = network.get_local_mac()

        self.assertEqual(expected_mac, returned_mac)

    def test_get_local_mac_raises_TooFewInterfaces_when_no_macs_found(
            self, mock_ifaddresses, mock_interfaces):
        """Force too few interfaces with an empty interface address."""
        mock_interfaces.return_value = ['eth0']
        mock_ifaddresses.return_value = {}

        with self.assertRaises(network.TooFewInterfaces):
            network.get_local_mac()

    def test_get_local_mac_raises_TooManyInterfaces_when_multiple_macs_found(
            self, mock_ifaddresses, mock_interfaces):
        """Define multiple interfaces to force too many interfaces."""
        mock_interfaces.return_value = ['eth0', 'eth1']
        mock_ifaddresses.side_effect = [
            {netifaces.AF_LINK: [{'addr': '00:11:22:33:44:55'}]},
            {netifaces.AF_LINK: [{'addr': '10:11:22:33:44:55'}]}
        ]

        with self.assertRaises(network.TooManyInterfaces):
            network.get_local_mac()


class NetworkUplinkTest(unittest.TestCase):
    """Tests for getting uplink MAC address with the network module."""

    def test_get_uplink_mac_raises_NoDefaultRoute_when_route_is_missing_gateway(
            self):
        route_lines = StringIO.StringIO(
            FAKE_ROUTE_TABLE_NO_DEFAULT_ROUTE).readlines()
        arp_cache = arp.ArpCache(StringIO.StringIO(FAKE_ARP_CACHE).readlines())

        with self.assertRaises(network.NoDefaultRoute):
            network.get_uplink_mac(route_lines, arp_cache)


if __name__ == '__main__':
    unittest.main()
