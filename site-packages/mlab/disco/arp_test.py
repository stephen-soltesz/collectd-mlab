"""Tests for arp module."""

import StringIO
import unittest

# Module under test.
import arp

FAKE_ARP_CACHE = """
IP address       HW type     Flags       HW address            Mask     Device
5.4.3.2          0x1         0x2         00:11:22:33:44:55     *        eth0
""".strip()


class ArpCacheTest(unittest.TestCase):
    """Tests for the arp.ArpCache class."""

    def test_mac_for_ip(self):
        arp_cache = arp.ArpCache(StringIO.StringIO(FAKE_ARP_CACHE).readlines())
        expected_mac = '00:11:22:33:44:55'

        returned_mac = arp_cache.mac_for_ip('5.4.3.2')

        self.assertEqual(expected_mac, returned_mac)

    def test_mac_for_ip_raises_MACNotFound_when_ip_address_not_in_cache(self):
        arp_cache = arp.ArpCache(StringIO.StringIO(FAKE_ARP_CACHE).readlines())

        with self.assertRaises(arp.MACNotFound):
            # This address is not found in the FAKE_ARP_CACHE.
            arp_cache.mac_for_ip('5.4.3.3')


if __name__ == '__main__':
    unittest.main()
