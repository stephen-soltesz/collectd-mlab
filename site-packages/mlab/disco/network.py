"""Utility methods for accessing local network information."""

import arp
import netifaces


class Error(Exception):
    """Base error class for network module."""
    pass


class NoDefaultRoute(Error):
    """Failed to find a default route in the routing table."""
    pass


class TooManyInterfaces(Exception):
    """Too many physical interfaces were found."""
    pass


class TooFewInterfaces(Exception):
    """Too few physical interfaces were found."""
    pass

# Default name for the loopback interface.
_LOOPBACK = 'lo'

# Path to the routing table file under the /proc filesystem.
_ROUTE_FILENAME = '/proc/net/route'

# The default IPv4 route address as reported by /proc/net/route.
_ROUTE_DEFAULT_ADDR = '00000000'


def get_local_mac():
    """Discovers the local network interface MAC address.

    Returns:
      str, local MAC address in six-byte hex form: 00:00:00:00:00:00.

    Raises:
      TooManyInterfaces: more than one MAC address is discovered.
      TooFewInterfaces: no MAC addresses are discovered.
    """
    macs = set()

    for iface in netifaces.interfaces():
        if iface == _LOOPBACK:
            continue
        addrs = netifaces.ifaddresses(iface)
        # AF_LINK is a link layer interface, i.e. the physical interface.
        if netifaces.AF_LINK in addrs:
            macs.add(addrs[netifaces.AF_LINK][0]['addr'])

    if not macs:
        raise TooFewInterfaces('Could not find any physical interfaces.')

    if len(macs) > 1:
        raise TooManyInterfaces(
            'Multiple physical interfaces are not supported, found: %s' % macs)

    return macs.pop()


def get_uplink_mac(route_lines=None, arp_cache=None):
    """Discovers a MAC address associated with the switch uplink port.

    Multiple MACs may be associated with the switch uplink port. We look
    specifically for the MAC associated with the IPv4 address of the default
    gateway which should always be present.

    Args:
      route_lines: None or list of str, lines read from a routing table. If
          None, read lines from the system routing table.
      arp_cache: None or arp.ArpCache, an ARP cache object. If None, use the
          system ARP cache.

    Returns:
      str, a MAC address in six-byte hex form: 00:00:00:00:00:00

    Raises:
      IOError: the routing table or ARP cache files cannot be opened.
      NoDefaultRoute: no default route is found in routing table.
      arp.MACNotFound: a MAC address is not found in the ARP cache.
    """
    if route_lines is None:
        with open(_ROUTE_FILENAME) as route_file:
            route_lines = route_file.readlines()

    if arp_cache is None:
        arp_cache = arp.ArpCache()

    route_ip = _parse_default_route(route_lines)
    return arp_cache.mac_for_ip(route_ip)


def _hexip_to_decip(hex_ip):
    """Converts a hexadecimal IPv4 address to quad-dotted form.

    Args:
      hex_ip: str, zero padded, network order, hexadecimal format IPv4 address.

    Returns:
      str, quad-dotted format IPv4 address.
    """
    fields = [hex_ip[i:i + 2] for i in range(0, len(hex_ip), 2)]
    dec_fields = [str(int(v, 16)) for v in fields]
    dec_fields.reverse()
    return '.'.join(dec_fields)


# TODO: Replace with version 0.10+ netifaces.gateways() function when possible.
def _parse_default_route(route_lines):
    """Parses a system routing table, and returns the default gateway IP.

    Example:
      $ cat /proc/net/route
      Iface   Destination   Gateway   Flags   RefCnt  Use     Metric  ...
      eth0    00000000      8180E417  0003    0       0       0       ...

    Args:
      route_lines: list of str, lines read from a routing table.

    Returns:
      str, quad-dotted format of the destination IP address for the first
          default gateway.

    Raises:
      NoDefaultRoute: there is no route entry with default route address.
    """
    # Skip the header.
    for line in route_lines[1:]:
        fields = line.split()
        if fields[1] == _ROUTE_DEFAULT_ADDR:
            return _hexip_to_decip(fields[2])
    raise NoDefaultRoute('No default route found!')
